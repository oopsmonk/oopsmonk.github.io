<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Linux on oopsmonk</title>
    <link>https://oopsmonk.github.io/tags/linux/</link>
    <description>Recent content in Linux on oopsmonk</description>
    <image>
      <url>https://oopsmonk.github.io/images/bio-oopsmonk.jpg</url>
      <link>https://oopsmonk.github.io/images/bio-oopsmonk.jpg</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 17 Nov 2017 08:12:13 +0800</lastBuildDate><atom:link href="https://oopsmonk.github.io/tags/linux/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Policy Configuration of SELinux and SEAndroid</title>
      <link>https://oopsmonk.github.io/posts/2017-11-17-policy-configuration-of-selinux-and-seandroid/</link>
      <pubDate>Fri, 17 Nov 2017 08:12:13 +0800</pubDate>
      
      <guid>https://oopsmonk.github.io/posts/2017-11-17-policy-configuration-of-selinux-and-seandroid/</guid>
      <description>A Note for SELinux and SEAndroid policy configuration.
SEAndroid Security-Enhanced Linux in Android
SELinux for Android 8 - Treble mode
SEAndroid安全機制中的文件安全上下文關聯分析 - file_context
SEAndroid安全機制中的進程安全上下文關聯分析 - process
Android 8 Treble mode:  Kernel early mount PRODUCT_FULL_TREBLE, PRODUCT_FULL_TREBLE_OVERRIDE, BOARD_SEPOLICY_DIRS  Android 4.3 ~ 6 TE macro define: external/sepolicy/te_macros
Android 8 TE macro define: system/sepolicy/te_macros
##################################### # domain_trans(olddomain, type, newdomain) # Allow a transition from olddomain to newdomain # upon executing a file labeled with type.</description>
    </item>
    
    <item>
      <title>Faster R-CNN Use Caffe Framework</title>
      <link>https://oopsmonk.github.io/posts/2017-08-31-faster-r-cnn-use-caffe-framework/</link>
      <pubDate>Thu, 31 Aug 2017 10:00:10 +0800</pubDate>
      
      <guid>https://oopsmonk.github.io/posts/2017-08-31-faster-r-cnn-use-caffe-framework/</guid>
      <description>Install caffe framework and run Faster R-CNN demo on Ubuntu 16.04.
Test environment CPU: Intel(R) Core(TM) i3-4130 CPU @ 3.40GHz 4-Cores
GPU: ASUSTeK GeForce GTX 1060 with 6GB Memory
HD: WDC WD5000AAKX
OS: Ubuntu 16.04
Test Flow  Install software requirement Video pre-processing: get jpeg images from source video Image Labeling Use Faster R-CNN to genrate trained model Run Faster R-CNN demo  Requirement Hardware:
Good graphic card with large memory (6GB memory is okay, but it has problem in VGG traing.</description>
    </item>
    
    <item>
      <title>[Paper] - An Evolutionary Study of Linux Memory Management for Fun and Profit</title>
      <link>https://oopsmonk.github.io/posts/2017-06-13-linux-memory-management/</link>
      <pubDate>Tue, 13 Jun 2017 14:47:22 +0800</pubDate>
      
      <guid>https://oopsmonk.github.io/posts/2017-06-13-linux-memory-management/</guid>
      <description>Memory management主要的功能是page mapping, memory protection, and sharing, 但隨著時間不斷的演進已經算是kernel裡不小的subsystem.
這份研究分析2009~2015年之間4587筆有關memory management(mm)的patches, Linux版本由v2.6.32.1 ~ v4.0-rc4.
Source: An Evolutionary Study of Linux Memory Management for Fun and Profit
Memory Bugs 5種bugs存在mm: memory error, checking, concurrency, logic and programming.
透過heat map可清楚看到主要bug發生地方
主要的bug fix在: Memory Allocation, Garbage Collection (GC), Virtual Memory Management.
大部份memory leak並不是因為忘了free, 而是錯誤的page fault handling和 free page的計算.
MM較大的問題是很難去track正確的狀態.
Memory optimization 定義3種optimization patches
 data structure: 避免nested data structure. Scalability的實現, scalability問題是因為locking for atomic access to shared data structures.</description>
    </item>
    
    <item>
      <title>Linux Graphic Stack相關的名詞</title>
      <link>https://oopsmonk.github.io/posts/2017-05-30-linux-graphic-stack/</link>
      <pubDate>Tue, 30 May 2017 14:46:40 +0800</pubDate>
      
      <guid>https://oopsmonk.github.io/posts/2017-05-30-linux-graphic-stack/</guid>
      <description>Linux graphic 架構還滿複雜的, 在看時需要大略了解几個名詞及之間的關係.
  X Window System:
目前來到第11版本所以叫X11, 是以X window System Core protocol為基礎的window system.
  wayland:
由於X11太過複雜且在embbeded system中的效能不佳, 用來取代X window System Core protocol.
  weston (wayland compositor):
以wayland protocol來實做的compositor做為參考的範例, 實用上會用Westeros, Clutter&amp;hellip;等.
  KMS/UMS:
Kernel mode-setting 及User mode-setting.
  OpenGL: 由Khronos Group制定的跨平台graphic API.
  GLX:
是一個extension, 做為OpenGL與X window system之間的橋樑. 就像embedded system的EGL, MacOS的AGL.
  DRM(Direct Rendering Manager):
為了防止世界被破壞, 保護世界的和平. 防止同時使用graphic buffer.
  DRI(Direct Rendering Infrastructure):</description>
    </item>
    
    <item>
      <title>在Shell使用vi-mode</title>
      <link>https://oopsmonk.github.io/posts/2017-03-28-vi-mode-in-shell/</link>
      <pubDate>Tue, 28 Mar 2017 15:36:08 +0800</pubDate>
      
      <guid>https://oopsmonk.github.io/posts/2017-03-28-vi-mode-in-shell/</guid>
      <description>Vi用慣了, 那在shell也可以vi-style嗎? 答案是可以的!
這個方法可使用在常用的shell, 例如bash, ksh, zsh, mksh.
btw, mksh 是Android使用的shell, 但Ubuntu預設的dash 是不支援的.
在shell中執行set -o vi 後按&amp;rsquo;i&amp;rsquo;進入insert mode, &amp;lsquo;ESC&amp;rsquo;為normal mode.
回到原本的模式則是set -o emacs
如下圖:
Reference: Using vi-mode in your shell</description>
    </item>
    
    <item>
      <title>The First SHA1 Collision</title>
      <link>https://oopsmonk.github.io/posts/2017-03-03-the-first-sha1-collision/</link>
      <pubDate>Fri, 03 Mar 2017 09:44:13 +0800</pubDate>
      
      <guid>https://oopsmonk.github.io/posts/2017-03-03-the-first-sha1-collision/</guid>
      <description>CWI Institute in Amsterdam and Google genrate two PDF documents with the same SHA-1 digest.
Google security blog - Announcing the first SHA1 collision
SHA-1 collistion and Git If a file A with X hash in local repository and with X hash in remote (SHA-1 collistion between local and remote), would overwrite the local version?  Nope. If it has the same SHA1, it means that when we receive the object from the other end, we will not overwrite the object we already have.</description>
    </item>
    
    <item>
      <title>Bash Quick Reference</title>
      <link>https://oopsmonk.github.io/posts/2014-12-04-bashquickref/</link>
      <pubDate>Thu, 04 Dec 2014 01:53:31 +0800</pubDate>
      
      <guid>https://oopsmonk.github.io/posts/2014-12-04-bashquickref/</guid>
      <description>Advanced Bash-Scripting Guide
sed
awk
Internal Variables #current parent pid $$ #last background process pid $! #last exit status $? #current instance pid, Bash 4.x above. $BASHPID Arithmetic Expansion a=12 b=$(($a + 10))  b=`expr $a + 1` b=$(expr $a + 1)  let b=$a+3 #let b=$a + 3 #incorrect  let &amp;#34;b = $a+ 3&amp;#34;  declare -i b=$a+$a Manipulating Strings  String is a number  if [[ $var =~ ^-?</description>
    </item>
    
    <item>
      <title>Building MOC</title>
      <link>https://oopsmonk.github.io/posts/2013-08-23-mocbuilding/</link>
      <pubDate>Fri, 23 Aug 2013 01:53:31 +0800</pubDate>
      
      <guid>https://oopsmonk.github.io/posts/2013-08-23-mocbuilding/</guid>
      <description>clone MOC svn repository to github Ref: Converting a Subversion repository to Git
$ sudo apt-get install subversion git-svn $ mkdir moc-svn $ cd moc-svn $ svn co svn://daper.net/moc/trunk $ svn log -q | awk -F &amp;#39;|&amp;#39; &amp;#39;/^r/ {sub(&amp;#34;^ &amp;#34;, &amp;#34;&amp;#34;, $2); sub(&amp;#34; $&amp;#34;, &amp;#34;&amp;#34;, $2); print $2&amp;#34; = &amp;#34;$2&amp;#34; &amp;lt;&amp;#34;$2&amp;#34;&amp;gt;&amp;#34;}&amp;#39; | sort -u &amp;gt; authors-transform.txt $ cd .. $ mkdir moc-git $ git svn clone svn://daper.net/moc/trunk --no-metadata -A ./moc-svn/authors-transform.txt .</description>
    </item>
    
    <item>
      <title>Redirect and Save iptables on Ubuntu 12.04</title>
      <link>https://oopsmonk.github.io/posts/2013-07-05-savingiptables/</link>
      <pubDate>Fri, 05 Jul 2013 01:53:31 +0800</pubDate>
      
      <guid>https://oopsmonk.github.io/posts/2013-07-05-savingiptables/</guid>
      <description>Redirect port 8080 to 80
sudo iptables -t nat -A PREROUTING -p tcp --dport 80 -j REDIRECT --to-port 8080  Check iptables setting
sudo iptables -t nat -L  Save configure to iptables.rules
sudo iptables-save &amp;gt; /etc/iptables.rules  Save Solution #1 Configre /etc/network/interfaces
iface eth0 inet dhcp  pre-up iptables-restore &amp;lt; /etc/iptables.rules Save Solution #2 Configure /etc/network/if-pre-up.d/iptablesload
#!/bin/sh iptables-restore &amp;lt; /etc/iptables.rules exit 0 Configure /etc/network/if-post-down.d/iptablessave
#!/bin/sh iptables-save -c &amp;gt; /etc/iptables.rules if [ -f /etc/iptables.</description>
    </item>
    
    <item>
      <title>Install JDK1.4.2(32bit) on Ubuntu 12.04 LTS(64bit) </title>
      <link>https://oopsmonk.github.io/posts/2013-06-20-jdk1.4.2/</link>
      <pubDate>Thu, 20 Jun 2013 01:53:31 +0800</pubDate>
      
      <guid>https://oopsmonk.github.io/posts/2013-06-20-jdk1.4.2/</guid>
      <description>Here is an error occurred if installed directly:
install.sfx.XXX: not found
Solution:
install g++-mltilib and JDK $ sudo apt-get install g++-multilib $ chmod +x j2sdk-1_4_2_19-linux-i586.bin $ ./j2sdk-1_4_2_19-linux-i586.bin ..... Do you agree to the above license terms? [yes or no] yes Unpacking... Checksumming... 0 0 Extracting... UnZipSFX 5.40 of 28 November 1998, by Info-ZIP (Zip-Bugs@lists.wku.edu). creating: j2sdk1.4.2_19/ creating: j2sdk1.4.2_19/jre/ creating: j2sdk1.4.2_19/jre/bin/ inflating: j2sdk1.4.2_19/jre/bin/java inflating: j2sdk1.4.2_19/jre/bin/keytool inflating: j2sdk1.4.2_19/jre/bin/policytool .... Creating j2sdk1.4.2_19/lib/tools.jar Creating j2sdk1.</description>
    </item>
    
    <item>
      <title>Remove the same files in two folders</title>
      <link>https://oopsmonk.github.io/posts/2013-06-19-comparermfileintwofolder/</link>
      <pubDate>Wed, 19 Jun 2013 01:53:31 +0800</pubDate>
      
      <guid>https://oopsmonk.github.io/posts/2013-06-19-comparermfileintwofolder/</guid>
      <description>有時在整理照片或文件時, 需要比對2個資料匣, 把重覆的檔案拿掉.
Dwonload Source Here
function usage(){  echo &amp;#34;Find the same file in two folders and remove it.&amp;#34;  echo &amp;#34;usage : ./comp-rm.sh target-dir source-dir&amp;#34;  echo &amp;#34;remove the same files in target-dir.&amp;#34; }  if [ $# -ne 2 ]; then  usage  exit 1 fi  target_dir=$1 source_dir=$2 f_list1=$(find &amp;#34;$target_dir&amp;#34; -type f) f_list2=$(find &amp;#34;$source_dir&amp;#34; -type f)   for i in $f_list1; do  echo $f_list2 | grep $(basename $i) &amp;gt;/dev/null &amp;amp;&amp;amp; hit_str+=$i&amp;#34;;&amp;#34; done  if [ -z $hit_str ]; then  echo &amp;#34;list is empty.</description>
    </item>
    
    <item>
      <title>How to split boot.img and get kernel config</title>
      <link>https://oopsmonk.github.io/posts/2012-09-12-how2splitbootimage/</link>
      <pubDate>Wed, 12 Sep 2012 00:00:00 +0000</pubDate>
      
      <guid>https://oopsmonk.github.io/posts/2012-09-12-how2splitbootimage/</guid>
      <description>boot_cm9.img file from mk802_legacy-compatibility_v1.zip
Device: Rikomagic MK802
Script files : Split_bootimg.pl , extract-ikconfig ( in {kernel_source}/script )
Split boot.img Copy boot_cm9.img, Split_bootimg.pl, extract-ikconfig into &amp;lsquo;split_boot&amp;rsquo;
$ mkdir split_boot $ cd split_boot $ ./split_bootimg.pl boot_cm9.img Page size: 2048 (0x00000800) Kernel size: 8094708 (0x007b83f4) Ramdisk size: 178940 (0x0002bafc) Second size: 0 (0x00000000) Board name: Command line: console=ttyS0,115200 rw init=/init loglevel=8 Writing boot_cm9.img-kernel ... complete. Writing boot_cm9.img-ramdisk.gz ... complete. Get kernel image (boot_cm9.img-kernel) and ramdisk (boot_cm9.</description>
    </item>
    
    <item>
      <title>How to extract kernel config from uImage</title>
      <link>https://oopsmonk.github.io/posts/2012-08-21-how2extractkernelconfigfromuimage/</link>
      <pubDate>Tue, 21 Aug 2012 00:00:00 +0000</pubDate>
      
      <guid>https://oopsmonk.github.io/posts/2012-08-21-how2extractkernelconfigfromuimage/</guid>
      <description>Get extract-ikconfig in kernel-source/scripts/ $mkdir extreact-uImage $cd extreact-uImage $cp {kernel-source}/scripts/extract-ikconfig . Dump uImage skip 1024 bytes $cp {uImage/what/you/want} uImage $dd if=uImage of=dd_uImage bs=1024 skip=1 $./extract-ikconfig dd_uImage &amp;gt; config </description>
    </item>
    
    <item>
      <title>Build XBMC for Android on lubuntu 12.04</title>
      <link>https://oopsmonk.github.io/posts/2012-07-28-buildxbmc/</link>
      <pubDate>Sat, 28 Jul 2012 00:00:00 +0000</pubDate>
      
      <guid>https://oopsmonk.github.io/posts/2012-07-28-buildxbmc/</guid>
      <description>Install required packages # sudo apt-get install build-essential default-jdk git curl autoconf \ unzip zip zlib1g-dev gawk gperf Getting the Android SDK and NDK http://developer.android.com/sdk/index.html
SDK : android-sdk_r20.0.1-linux.tgz
crystax-5 NDK with enabled support of C++ exceptions, RTTI and Standard C++ Library
http://www.crystax.net/en/android/ndk/7#download
NDK : android-ndk-r7-crystax-5.beta2-linux-x86.tar.bz2
Installing Android SDK packages &amp;lt;android-sdk&amp;gt; : $HOME/XBMC_Project/android-sdk-linux
# cd &amp;lt;android-sdk&amp;gt;/tools # ./android update sdk -u -t platform,platform-tool Setup the Android toolchain &amp;lt;android-ndk&amp;gt; : $HOME/XBMC_Project/android-ndk-r8b &amp;lt;android-toolchain&amp;gt; : $HOME/XBMC_Project/android_toolchain/android-9</description>
    </item>
    
    <item>
      <title>Android Threads, Handlers and AsyncTask</title>
      <link>https://oopsmonk.github.io/posts/2012-06-14-androidthreadshandlersandasynctask/</link>
      <pubDate>Thu, 14 Jun 2012 00:00:00 +0000</pubDate>
      
      <guid>https://oopsmonk.github.io/posts/2012-06-14-androidthreadshandlersandasynctask/</guid>
      <description>先看過Processes and Threads會有比較清楚的概念, 當Adnroid Application 啟動後, 系統會建一個主要的thread 稱 &amp;ldquo;main thread&amp;rdquo; or &amp;ldquo;UI thread&amp;rdquo;, 所有的components 皆跑在這個UI thread, system calls 也是透過UI thread dispatched給各個component, ex: onKeyDown, touch event.
UI thread 如因大量運算或等待而blocked, 預設超過5秒ANR(Application Not Responding)就會發生.
且Android UI components 並非thread-safe, 使用上要特別小心.
所以:
 long time computation使用另外的thread, 不要寫在 UI Thread. 不要在UI thread 之外使用UI component method. 透過Thread, Handler and AsyncTask perform asynchronous processing, 避免UI thread block.  Threads Android 提供以下的method, 可在其它的thread 下調用 UI thread.
Activity.runOnUiThread(Runnable) View.post(Runnable) &amp;lt;-- used in example code.</description>
    </item>
    
  </channel>
</rss>
