<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>WebDev on oopsmonk</title>
    <link>https://oopsmonk.github.io/tags/webdev/</link>
    <description>Recent content in WebDev on oopsmonk</description>
    <image>
      <url>https://oopsmonk.github.io/images/bio-oopsmonk.jpg</url>
      <link>https://oopsmonk.github.io/images/bio-oopsmonk.jpg</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 04 Jul 2015 17:37:31 +0800</lastBuildDate><atom:link href="https://oopsmonk.github.io/tags/webdev/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>New Feature: Real-Time Monitoring</title>
      <link>https://oopsmonk.github.io/posts/2015-07-04-new-feature-real-time-monitoring/</link>
      <pubDate>Sat, 04 Jul 2015 17:37:31 +0800</pubDate>
      
      <guid>https://oopsmonk.github.io/posts/2015-07-04-new-feature-real-time-monitoring/</guid>
      <description>Real-Time Monitor for rpi-monitor:
 Update system status every 5 seconds. Two HTML layouts: change different layout via click Real-Time on navigation bar.  Project on github: rpi-monitor Layout 1(default):
Layout 2:</description>
    </item>
    
    <item>
      <title>Build A Blog with Jekyll and GitHub on Raspberry Pi</title>
      <link>https://oopsmonk.github.io/posts/2015-03-05-build-a-blog-with-jekyll-on-raspberry-pi/</link>
      <pubDate>Thu, 05 Mar 2015 23:30:11 +0800</pubDate>
      
      <guid>https://oopsmonk.github.io/posts/2015-03-05-build-a-blog-with-jekyll-on-raspberry-pi/</guid>
      <description>I recently switched my blog from Google Blogger to GitHub Pages, here is how I built my blog. I&amp;rsquo;ll go through the following:
 Install Jekyll on Raspberry Pi Setup Jekyll Theme Post a new article Images minimization Commit to GitHub  Using Jekyll and Minimal Mistake build a blog and host on GitHub and Raspberry Pi(or Ubuntu).
Requirements:
 Raspberry Pi(or Ubuntu) GitHub account Jekyll 2.2+ Minimal Mistake Grunt  If you have no idea with these things, here are useful resources:</description>
    </item>
    
    <item>
      <title>Raspberry Pi Monitor</title>
      <link>https://oopsmonk.github.io/posts/2014-07-21-rpimonitor/</link>
      <pubDate>Mon, 21 Jul 2014 01:53:31 +0800</pubDate>
      
      <guid>https://oopsmonk.github.io/posts/2014-07-21-rpimonitor/</guid>
      <description>Use RRDTool monitor Raspberry Pi, include CPU temperture, Memory usage, Disk I/O, Network I/O&amp;hellip;
Install install packages
$sudo apt-get install libcairo2-dev libpango1.0-dev libglib2.0-dev libxml2-dev \ librrd-dev python2.7-dev rrdtool python-rrdtool $wget https://pypi.python.org/packages/source/p/psutil/psutil-2.1.1.tar.gz $tar xf psutil-2.1.1.tar.gz $cd psutil-2.1.1 $sudo python setup.py install Download or clone rpi-monitor on github
https://github.com/oopsmonk/rpi-monitor
Setup Crontab By defualt, the cron.log is disabled in Raspbian. To enable it:
sudo vi /etc/rsyslog.conf  find the line and uncomment it.</description>
    </item>
    
    <item>
      <title>Nginx Error - 413 Request Entity Too Large</title>
      <link>https://oopsmonk.github.io/posts/2013-06-05-nginxerror413/</link>
      <pubDate>Wed, 05 Jun 2013 01:53:31 +0800</pubDate>
      
      <guid>https://oopsmonk.github.io/posts/2013-06-05-nginxerror413/</guid>
      <description>nginx version: nginx/1.1.19, OS: Ubuntu12.04
Default nginx accepted body size limitation is 1MB.
You can add client_max_body_size in nginx.conf.
This parameter can put in http, server and location sections of configutation file.
Enlarge body size to 10MB
client_max_body_size 10M  Or just disable it
client_max_body_size 0  For example enlarge body size to 10MB
Add to http section:
$ sudo vi /etc/nginx/nginx.conf  http {   ##  # Basic Settings  ##   sendfile on;  tcp_nopush on;  tcp_nodelay on;  keepalive_timeout 65;  types_hash_max_size 2048;  client_max_body_size 10M;  # server_tokens off;   # server_names_hash_bucket_size 64;  # server_name_in_redirect off;   include /etc/nginx/mime.</description>
    </item>
    
    <item>
      <title>Web Micro Framework Battle</title>
      <link>https://oopsmonk.github.io/posts/2013-05-27-pythonwebmicroframwork/</link>
      <pubDate>Mon, 27 May 2013 00:53:31 +0800</pubDate>
      
      <guid>https://oopsmonk.github.io/posts/2013-05-27-pythonwebmicroframwork/</guid>
      <description>WSGI Micro Framworks 這陣子一直在找適合的Micro Framwork玩第一次的Web Application.
最後選擇用Bottle, 原因是:
 Single file module, no dependencies with other library. Document  但是好不好用又是另一回事, 用了就知道..XD
以下是由WSGI.org列出的Micro Framwork:
  bobo
Bobo is a light-weight framework. Its goal is to be easy to use and remember.
  Bottle
Bottle is a fast and simple micro-framework for small web-applications. It offers request dispatching (Routes) with url parameter support, Templates, key/value Databases, a build-in HTTP Server and adapters for many third party WSGI/HTTP-server and template engines.</description>
    </item>
    
  </channel>
</rss>
