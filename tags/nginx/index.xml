<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Nginx on oopsmonk</title>
    <link>https://oopsmonk.github.io/tags/nginx/</link>
    <description>Recent content in Nginx on oopsmonk</description>
    <image>
      <title>oopsmonk</title>
      <url>https://oopsmonk.github.io/images/bio-oopsmonk.jpg</url>
      <link>https://oopsmonk.github.io/images/bio-oopsmonk.jpg</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 19 May 2017 15:21:10 +0800</lastBuildDate><atom:link href="https://oopsmonk.github.io/tags/nginx/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Enable gzip compression in Nginx</title>
      <link>https://oopsmonk.github.io/posts/2017-05-19-enable-gzip-compression-in-nginx/</link>
      <pubDate>Fri, 19 May 2017 15:21:10 +0800</pubDate>
      
      <guid>https://oopsmonk.github.io/posts/2017-05-19-enable-gzip-compression-in-nginx/</guid>
      <description>How to enable and test gzip in Nginx.
Official document: ngx_http_gzip_module
Enable gzip I use Raspberry Pi System Monitor to test gzip module.
Modify /etc/nginx/sites-available/default to enable gzip.
In this case I only change the RpiMonitor website in the server, you can apply it to global by /etc/nginx/nginx.conf
location /rpi { proxy_pass http://127.0.0.1:9999/RpiMonitor; } Change to
location /rpi { proxy_pass http://127.0.0.1:9999/RpiMonitor; gzip on; gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript; gzip_proxied any; } Then reload nginx.</description>
    </item>
    
    <item>
      <title>Drawing IP Geolocation on World Map</title>
      <link>https://oopsmonk.github.io/posts/2015-08-01-drawing-ip-geolocation-to-the-world-map/</link>
      <pubDate>Sat, 01 Aug 2015 20:28:47 +0800</pubDate>
      
      <guid>https://oopsmonk.github.io/posts/2015-08-01-drawing-ip-geolocation-to-the-world-map/</guid>
      <description>I found some mystery visitors in nginx&amp;rsquo;s access log. I tried to figure out the location of those visitors and what they did.
IP collection First copy nginx&amp;rsquo;s access log to a folder and save all logs into a single file.
$ mkdir mysteryIPs &amp;amp;&amp;amp; cd $_ $ sudo cp /var/log/nginx/access.log.* . $ zcat access.log.* &amp;gt; access-gz.log $ cat access.log.1 &amp;gt;&amp;gt; access-gz.log $ cat access.log &amp;gt;&amp;gt; access-gz.log Remove LAN accesses from log file, for example my subnet IP rang is 192.</description>
    </item>
    
    <item>
      <title>Nginx Error - 413 Request Entity Too Large</title>
      <link>https://oopsmonk.github.io/posts/2013-06-05-nginxerror413/</link>
      <pubDate>Wed, 05 Jun 2013 01:53:31 +0800</pubDate>
      
      <guid>https://oopsmonk.github.io/posts/2013-06-05-nginxerror413/</guid>
      <description>nginx version: nginx/1.1.19, OS: Ubuntu12.04
Default nginx accepted body size limitation is 1MB.
You can add client_max_body_size in nginx.conf.
This parameter can put in http, server and location sections of configutation file.
Enlarge body size to 10MB
client_max_body_size 10M Or just disable it
client_max_body_size 0 For example enlarge body size to 10MB
Add to http section:
$ sudo vi /etc/nginx/nginx.conf http { ## # Basic Settings ## sendfile on; tcp_nopush on; tcp_nodelay on; keepalive_timeout 65; types_hash_max_size 2048; client_max_body_size 10M; # server_tokens off; # server_names_hash_bucket_size 64; # server_name_in_redirect off; include /etc/nginx/mime.</description>
    </item>
    
    <item>
      <title>uWSGI &amp; Nginx on Ubuntu</title>
      <link>https://oopsmonk.github.io/posts/2013-05-21-usinguwsgi/</link>
      <pubDate>Tue, 21 May 2013 08:53:31 +0800</pubDate>
      
      <guid>https://oopsmonk.github.io/posts/2013-05-21-usinguwsgi/</guid>
      <description>Install uWSGI Configure uWSGI $ sudo apt-get install python-dev python-pip $ sudo pip uwsgi ################# uWSGI configuration ################# pcre = False kernel = Linux malloc = libc execinfo = False ifaddrs = True ssl = True matheval = False zlib = True locking = pthread_mutex plugin_dir = . timer = timerfd yaml = True json = False filemonitor = inotify routing = False debug = False zeromq = False capabilities = False xml = expat event = epoll ############## end of uWSGI configuration ############# *** uWSGI is ready, launch it with /usr/local/bin/uwsgi *** Successfully installed uwsgi Cleaning up.</description>
    </item>
    
  </channel>
</rss>
