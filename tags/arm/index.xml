<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>ARM on oopsmonk</title>
    <link>https://oopsmonk.github.io/tags/arm/</link>
    <description>Recent content in ARM on oopsmonk</description>
    <image>
      <title>oopsmonk</title>
      <url>https://oopsmonk.github.io/images/bio-oopsmonk.jpg</url>
      <link>https://oopsmonk.github.io/images/bio-oopsmonk.jpg</link>
    </image>
    <generator>Hugo -- 0.147.8</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 17 Jan 2024 10:39:45 +0800</lastBuildDate>
    <atom:link href="https://oopsmonk.github.io/tags/arm/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ARM AMBA</title>
      <link>https://oopsmonk.github.io/posts/2024-01-17-arm-amba/</link>
      <pubDate>Wed, 17 Jan 2024 10:39:45 +0800</pubDate>
      <guid>https://oopsmonk.github.io/posts/2024-01-17-arm-amba/</guid>
      <description>&lt;h2 id=&#34;advanced-microcontroller-bus-architectureamba&#34;&gt;Advanced Microcontroller Bus Architecture(&lt;a href=&#34;https://www.arm.com/en/architecture/system-architectures/amba&#34;&gt;AMBA&lt;/a&gt;)&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;2024-01-17&lt;/strong&gt;
AMBA 5 is the latest generation of the freely available &lt;code&gt;AMBA protocol specifications&lt;/code&gt;. It introduces the &lt;code&gt;Coherent Hub Interface&lt;/code&gt; (CHI) architecture, which defines the interfaces to connect fully coherent processors and high-performance interconnects. AMBA 5 also introduces the AXI5, ACE5 and AHB5 protocols, which extend prior generations to include a number of performances and scalability features, and to align and complement CHI.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://oopsmonk.github.io/images/2024-01-17/AMBA-System-Diagram.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;AMBA 5 Protocols&lt;/p&gt;</description>
    </item>
    <item>
      <title>ARM Mali Profiling Metrics</title>
      <link>https://oopsmonk.github.io/posts/2017-11-01-arm-mali-profiling-metrics/</link>
      <pubDate>Wed, 01 Nov 2017 19:14:00 +0800</pubDate>
      <guid>https://oopsmonk.github.io/posts/2017-11-01-arm-mali-profiling-metrics/</guid>
      <description>&lt;p&gt;Some metrics for ARM Mali performance analysis in DS-5 Streamline or MGD.&lt;/p&gt;
&lt;h1 id=&#34;ds-5-streamline&#34;&gt;DS-5 Streamline&lt;/h1&gt;
&lt;h2 id=&#34;mali-470-utgard&#34;&gt;Mali-470 (Utgard)&lt;/h2&gt;
&lt;p&gt;GPU Bandwidth = (Words read, master + Words written, master) * Bus Width&lt;br&gt;
Overdraw = Fragments Passed Z/stencil count * Number of Cores / Resolution * FPS&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://oopsmonk.github.io/images/2017-11-01/Mali470MP4_750MHz_DS5.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;GPU Bandwidth = (38342943+38661456) * (128/8) = 1232070384 bytes/s = 1174.99 MB/s
Overdraw = (79194586+79152584+79112550+79117609)/(1920x1080) = 152.67&lt;/p&gt;
&lt;h2 id=&#34;mali-t820-midgard&#34;&gt;Mali-T820 (Midgard)&lt;/h2&gt;
&lt;p&gt;Job Slots&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;JS0: fragment shading.&lt;/li&gt;
&lt;li&gt;JS1: vertex, geometry, compute, and tiling.&lt;/li&gt;
&lt;li&gt;JS2: vertex, geometry, and compute.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Fragment Percentage = (JS0 Active / GPU frequency) * 100&lt;br&gt;
Vertex percentage = (JS1 Active / Frequency) * 100&lt;br&gt;
Load Store CPI = Full Pipeline issues / Load Store Instruction Words Completed&lt;br&gt;
GPU Bandwidth  = (External read beats + External write beats) * Bus Width&lt;br&gt;
Overdraw = Fragment Threads Started * Number of Cores/ Resolution * FPS&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
